
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Haggi Krey, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/metadata.h"
#include "appleseed/microfacet.h"

#define isBlack(c) ((c[0] <= 0.0) && (c[1] <= 0.0) && (c[2] <= 0.0))

shader uberShader
[[
    string help = "uber shader",
    string mayaClassification = "Appleseed/material:shader/surface:swatch/AppleseedRenderSwatch:drawdb/shader/surface/uberShader",
    int mayaId = 0
]]
(
    int matte = 0
    [[
        string help = "Use matte",
        string hint = "useAsBool"
    ]],
    vector normalCamera = N,
    float diffuseValue = 0.8
    [[
        string help = "Diffuse reflectivity multiplier",
        APPLESEED_01_LIMIT_METADATA
    ]],
    vector diffuseColor = 1.0
    [[
        string help = "Color",
        string hint = "useAsColor"
    ]],
    float roughness = 0.0
    [[
        string help = "Surface roughness. Mix between lambert and orenNayar."
    ]],
    float backlighting = 0.0
    [[
        string help = "Backlighting, show light though a surface (poor mans translucency)."
    ]],
    float translucency = 0.0
    [[
        string help = "Translucency.",
        APPLESEED_01_LIMIT_METADATA
    ]],
    vector translucencyColor = 0.0
    [[
        string help = "Translucency color",
        string hint = "useAsColor"
    ]],

    // specularity
    float specular1 = 0.5
    [[
        string help = "Specularity 1 value",
        APPLESEED_01_LIMIT_METADATA
    ]],
    float specularIOR1 = 1.5
    [[
        string help = "Specularity 1 index of reflection",
        float min = 0.001,
        float max = 3.0,
        string hint = "softmax"
    ]],
    int specularUseFresnel1 = 1
    [[
        string help = "Specularity 1 use fresnel",
        string hint = "useAsBool"
    ]],
    float reflectivityAtZeroDeg = 0.0
    [[
        string help = "Reflectivity at 0 Degree",
        APPLESEED_01_LIMIT_METADATA
    ]],
    float roughness1 = 0.1
    [[
        string help = "Roughness",
        float min = 0.001,
        float max = 1.0,
        string hint = "softmax"
    ]],
    vector specularColor1 = 0.0
    [[
        string help = "Specular color 1",
        string hint = "useAsColor"
    ]],
    float anisotropy1 = 0.0
    [[
        string help = "Anisotropy",
        float min = -1.0,
        float max =  1.0
    ]],
    string reflectionMdf = "ggx"
    [[
        string help = "Microfacet distribution to use: Beckmann or GGX.",
        string options = "beckmann|ggx"
    ]],

    // refraction
    float refractionIOR = 1.3
    [[
        string help = "Refraction Index",
        float min = -2.0,
        float max =  2.0,
        string hint = "softminmax"
    ]],
    vector refractionColor = 1.0
    [[
        string help = "Refraction color",
        string hint = "useAsColor"
    ]],
    float absorptionDist = 0
    [[
        string help = "Absorption distance",
        float min = 0.0,
        float max = 5.0,
        string hint = "softmax"
    ]],
    vector absorptionColor = 0.0
    [[
        string help = "Absorption color",
        string hint = "useAsColor"
    ]],
    float refractivity = 0.0
    [[
        string help = "Refractivity",
        APPLESEED_01_LIMIT_METADATA
    ]],
    float refractionRoughness = 0.0
    [[
        string help = "Refraction roughness",
        float min = 0.001,
        float max = 1.0,
        string hint = "softmax"
    ]],
    string refractionMdf = "ggx"
    [[
        string help = "Microfacet distribution to use: Beckmann or GGX.",
        string options = "beckmann|ggx"
    ]],


    // subsurface scattering
    int SSS1 = 0
    [[
        string help = "Use SSS 1",
        string hint = "useAsBool"
    ]],
    vector SSS1Color = 0.0
    [[
        string help = "Subsurface color",
        string hint = "useAsColor"
    ]],
    float SSS1Weight = 0.0
    [[
        string help = "Subsurface color Multiplier",
        APPLESEED_01_LIMIT_METADATA
    ]],
    vector SSS1Radius = 1.0
    [[
        string help = "Radius per Color",
        string hint = "useAsColor"
    ]],
    float SSS1RadiusMultiplier = 1.0
    [[
        string help = "Subsurface color Multiplier",
        float min = 0.0,
        float max = 3.0,
        string hint = "softmax"
    ]],

    vector emissionColor = 0.0
    [[
        string help = "Emission Color",
        string hint = "useAsColor"
    ]],
    float emissionMultiplier = 1.0
    [[
        string help = "Emission Color Multiplier",
        float min = 0.0,
        float max = 3.0,
        string hint = "softmax"
    ]],

    output closure color outColor = 0)
{
    outColor = color(diffuseColor) * diffuse(normalCamera);
}