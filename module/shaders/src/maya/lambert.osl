

surface lambert
(
    vector Normal = N,
    float inDiffuse = 0.8,
    vector inColor = 1.0
    [[
        string help = "Color",
        string hint = "useAsColor"
    ]],
    vector incandescence = 0.0
    [[
        string help = "Incandescence",
        string hint = "useAsColor"
    ]],
    vector transparency = 0.0
    [[
        string help = "Transparency",
        string hint = "useAsColor"
    ]],
    output closure color outColor = 0    
)
{
    outColor = (inDiffuse * color(inColor) * diffuse(Normal)) + (color(incandescence) * emission()) + (color(transparency) * transparent());        
}
