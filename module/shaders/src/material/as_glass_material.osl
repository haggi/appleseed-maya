
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2015 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/defaults.h"
#include "appleseed/ior.h"
#include "appleseed/metadata.h"
#include "appleseed/microfacet.h"

surface as_glass_material
[[
    string help = "Glass material"
]]
(
    vector Normal = N,
    vector Tangent = APPLESEED_DEFAULT_TANGENT,

    string Distribution = APPLESEED_DEFAULT_MDF_DISTRIBUTION
    [[ 
        APPLESEED_MDF_DISTRIBUTION_METADATA
    ]],

    float Roughness = APPLESEED_DEFAULT_MDF_ROUGHNESS
    [[
        APPLESEED_MDF_ROUGHNESS_METADATA
    ]],

    float Anisotropy = APPLESEED_DEFAULT_ANISOTROPY
    [[
        APPLESEED_ANISOTROPY_METADATA
    ]],

    float Reflection = 1
    [[
        string help = "Reflection",
        APPLESEED_01_LIMIT_METADATA
    ]],
    color ReflectionColor = 1,

    float Refraction = 1
    [[
        string help = "Refraction",
        APPLESEED_01_LIMIT_METADATA
    ]],
    color RefractionColor = 1,

    float  Ior = APPLESEED_DEFAULT_IOR
    [[
        APPLESEED_IOR_METADATA
    ]],

    float Absorption = 0
    [[
        string help = "Absorption cross section",
        float min = 0.0
    ]],

    color AbsorptionColor = 1
    [[
        string help = "Absorption color"
    ]]
)
{
    float from_ior;
    float to_ior;

    color Cabs = 1.0;

    if (backfacing())
    {
        from_ior = Ior;
        to_ior = 1.0;

        if (Absorption != 0.0)
        {
            float length;
            getattribute("path:ray_length", length);
            Cabs = exp(-Absorption * AbsorptionColor * length);
        }
    }
    else
    {
        from_ior = 1.0;
        to_ior = Ior;
    }

    float eta = from_ior / to_ior;

    float Kr, Kt;
    fresnel(I, Normal, eta, Kr, Kt);

    if (Distribution == "sharp")
    {
        Ci = Cabs *
            ((Kr * Reflection * ReflectionColor * reflection(Normal)) + 
             (Kt * Refraction * RefractionColor * refraction(Normal, eta)));
    }
    else
    {
        float ax, ay;
        mdf_roughness(Roughness, Anisotropy, ax, ay);

        Ci = Cabs *
            ((Kr * Reflection * ReflectionColor * microfacet(Distribution, Normal, Tangent, ax, ay, eta, 0)) +
             (Kt * Refraction * RefractionColor * microfacet(Distribution, Normal, Tangent, ax, ay, eta, 1)));
    }
}
