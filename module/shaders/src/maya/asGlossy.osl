
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/microfacet.h"

shader asGlossy
[[
    string help = "Glossy surface shader",
    string mayaClassification = "Appleseed/material:shader/surface:swatch/AppleseedRenderSwatch"
]]
(
    vector               normalCamera = N,
    vector               Tn = 0
    [[
        int    lockgeom = 0,
        string help = "Tangent"
    ]],
    float                reflectance = 0.8
    [[
        float  min = 0,
        float  max = 1
    ]],
    vector                surfaceColor = 1.0
    [[
        string help = "Surface Color",
        string hint = "useAsColor"
    ]],
    float                ior = 1.5
    [[
        string help = "Index of refraction",
        float  min = -1.0,
        float  max = 1.0,
        string hint = "softminmax"
    ]],
    string               distribution = "ggx"
    [[
        string help = "Microfacet distribution to use",
        string widget = "popup",
        string options = "beckmann|ggx"
    ]],
    float                roughness = 0.1
    [[
        string help = "Surface roughness",
        float  min = 0.001,
        float  max = 1.0
    ]],
    float                roughnessDepthScale = 1.0
    [[
        float min = 1.0
    ]],
    float                anisotropic = 0.0
    [[
        string help = "Anisotropy",
        float  min = -1.0,
        float  max = 1.0
    ]],
    output closure color outColor = 0
)
{
    outColor = color(surfaceColor) * reflectance * as_glossy(
        distribution, 
        normalCamera, 
        Tn,
        microfacet_roughness(roughness, roughnessDepthScale),
        anisotropic, 
        ior);
}
