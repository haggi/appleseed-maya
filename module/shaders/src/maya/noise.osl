
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "mayaUtils.h"
//#include "noise_utils.h"

shader noise
(
    float threshold = 0.0,
    float amplitude = 1.0,
    float ratio = 0.707,
    float frequencyRatio = 2.0,
    int depthMax = 3,
    int inflection = 0,
    float inTime = 0.0,
    float frequency = 8.0,
    float implode = 0.0,
    vector implodeCenter = vector(0.5, 0.5 , 0.0),
    int noiseType = 1,
    float density = 1.0,
    float spotynes = 0.1,
    float sizeRand = 0.0,
    float randomnes = 1.0,
    int falloff = 0,
    int numWaves = 6,
    vector uvCoord = 0,
    MAYA_COLORBALANCE,
    MAYA_DEFAULT_OUTPUT
)
{
    float s = u;
    float t = v;
    if (isconnected(uvCoord))
    {
        s = uvCoord[0];
        t = uvCoord[1];
    }
    vector pp = vector(s, t, 0.0);
    if (implode)
    {
        vector icp = vector(implodeCenter[0], implodeCenter[1], 0.0);
        vector dp = pp - icp;
        dp = dp / pow(length(dp), implode);
        pp = dp + icp;
    }
    int depth[2] = {0, depthMax};
    float ripples[3] = {2, 2, 2};
    vector pn = pp * frequency;

    float noiseVal = 0.0;
    if (noiseType == 0) // perlin
    {
        if (inflection)
        {
            //noiseVal = amplitude * fTurb(pn, inTime, 1.0, frequencyRatio, depth, ratio, ripples);
        }
        else
        {
            //noiseVal = fBm(pn, inTime, amplitude, depth, 1, frequencyRatio, ratio);
            float amp = amplitude;
            vector pp = pn;
            float sum = 0;
            int i = 0;
            float lacunarity = 1.0;
            int octaves[2] = { depth[0], depth[1] };

            float pixelSize = sampleArea();
            float nyquist = 2.0 * pixelSize;
            float pixel = 1.0;

            while ((i < octaves[1] && pixel > nyquist) || i < octaves[0])
            {
                sum += amp * noise(pp * lacunarity, time);
                amp *= ratio;
                lacunarity *= frequencyRatio;
                pixel /= frequencyRatio;
                ++i;
            }

            if (pixel > pixelSize && i <= octaves[1])
            {
                float weight = clamp(pixel/pixelSize - 1.0, 0.0, 1.0);
                sum += weight * amp * noise(pp * lacunarity, time);
            }
            noiseVal = sum;
      }
    }
    if (noiseType == 1) // billow
    {
    }
    if (noiseType == 2) // wave
    {
    }
    if (noiseType == 3) // wispy
    {
    }
    if (noiseType == 4) // spacetime
    {
    }
    outColor = vector(1,0,0) * noiseVal;
    outColor = colorBalance(outColor, colorGain, colorOffset);
}
