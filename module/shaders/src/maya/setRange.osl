
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

shader setRange
(
    vector value = 0,
    vector inMin = 0,
    vector inMax = 1,
    vector oldMin = 0,
    vector oldMax = 1,
    output vector outValue = 0
)
{
    vector clippedColor = value;

    if (clippedColor[0] < oldMin[0])
        clippedColor[0] = oldMin[0];
    if (clippedColor[1] < oldMin[1])
        clippedColor[1] = oldMin[1];
    if (clippedColor[2] < oldMin[2])
        clippedColor[2] = oldMin[2];

    if (clippedColor[0] > oldMax[0])
        clippedColor[0] = oldMax[0];
    if (clippedColor[1] > oldMax[1])
        clippedColor[1] = oldMax[1];
    if (clippedColor[2] > oldMax[2])
        clippedColor[3] = oldMax[2];

    float dOld = 0.0;
    float dNew = 0.0;
    for (int i = 0; i < 3; i++)
    {
        dOld = oldMax[i] - oldMin[i];
        dNew = inMax[i] - inMin[i];
        outValue[i] = clippedColor[i] * dOld/dNew;
    }
}
