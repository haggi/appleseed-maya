
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2014 The masked shader writer, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

vector unit_vector_to_angles(vector dir)
{

    float theta = acos(dir[1]);
    float phi = atan2(dir[2], dir[0]);
    
    vector uvw;
    uvw[0] = theta;
    uvw[1] = phi;
    
    return uvw;
}


vector angles_to_unit_square(vector dir)
{
    vector angles = unit_vector_to_angles(dir);
    vector uvw;
    float theta = angles[0];
    float phi = angles[1];

    uvw[0] = (0.5 / M_PI) * (phi + M_PI);
    uvw[1] = (1.0 / M_PI) * theta;
    
    return uvw;
}

surface testBG()
{
    vector dir = normalize(I);
    vector uvw = angles_to_unit_square(dir); 
    float s = uvw[0] * 10;
    float t = uvw[1] * 10;
    color C = texture("C:/daten/3dprojects/mayaToAppleseed/sourceimages/06-Tatami_Room_B_8k.jpg", s, t, "wrap", "periodic", "interp", "cubit", "width", 1, "blur", .1);    
    Ci = color(C) * background();
}
