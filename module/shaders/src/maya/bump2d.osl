
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2016 Haggi Krey, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

//
// Reference for bump function:
//
//     Bump Mapping Unparametrized Surfaces on the GPU
//     Morten S. Mikkelsen
//     https://dl.dropbox.com/u/55891920/papers/mm_sfgrad_bump.pdf
//

shader bump2d
(
    float bumpValue = 0,
    float bumpDepth = 1.0,
    int bumpInterp = 0,
    vector normalCamera = N,
    vector normalMap = vector(0,0,0),
    vector Tn = 0
    [[
        int    lockgeom = 0
    ]],
    vector Bn = 0
    [[
        int    lockgeom = 0
    ]],
    int upVector = 0,
    output vector outNormal = 1
)
{
    outNormal = normalCamera;
    
    vector dpdx = Dx(P);
    vector dpdy = Dy(P);

    float dhx = Dx(bumpValue) * bumpDepth;
    float dhy = Dy(bumpValue) * bumpDepth;
    vector new_tn = Tn * length(dpdx) + N * dhx;
    vector new_bn = Bn * length(dpdy) + N * dhy;
    vector NormalOut = cross(normalize(new_bn), normalize(new_tn));
    outNormal = normalize(NormalOut);
    if (dot(outNormal, N) < 0.0)
        outNormal = -outNormal;
}
